// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"github.com/jkmrto/trade_executor/app"
	"github.com/jkmrto/trade_executor/domain"
	"sync"
)

// Ensure, that ExchangeMock does implement app.Exchange.
// If this is not the case, regenerate this file with moq.
var _ app.Exchange = &ExchangeMock{}

// ExchangeMock is a mock implementation of app.Exchange.
//
//	func TestSomethingThatUsesExchange(t *testing.T) {
//
//		// make and configure a mocked app.Exchange
//		mockedExchange := &ExchangeMock{
//			ApplySellFunc: func(sellBook *domain.SellBook) error {
//				panic("mock out the ApplySell method")
//			},
//		}
//
//		// use mockedExchange in code that requires app.Exchange
//		// and then make assertions.
//
//	}
type ExchangeMock struct {
	// ApplySellFunc mocks the ApplySell method.
	ApplySellFunc func(sellBook *domain.SellBook) error

	// calls tracks calls to the methods.
	calls struct {
		// ApplySell holds details about calls to the ApplySell method.
		ApplySell []struct {
			// SellBook is the sellBook argument value.
			SellBook *domain.SellBook
		}
	}
	lockApplySell sync.RWMutex
}

// ApplySell calls ApplySellFunc.
func (mock *ExchangeMock) ApplySell(sellBook *domain.SellBook) error {
	if mock.ApplySellFunc == nil {
		panic("ExchangeMock.ApplySellFunc: method is nil but Exchange.ApplySell was just called")
	}
	callInfo := struct {
		SellBook *domain.SellBook
	}{
		SellBook: sellBook,
	}
	mock.lockApplySell.Lock()
	mock.calls.ApplySell = append(mock.calls.ApplySell, callInfo)
	mock.lockApplySell.Unlock()
	return mock.ApplySellFunc(sellBook)
}

// ApplySellCalls gets all the calls that were made to ApplySell.
// Check the length with:
//
//	len(mockedExchange.ApplySellCalls())
func (mock *ExchangeMock) ApplySellCalls() []struct {
	SellBook *domain.SellBook
} {
	var calls []struct {
		SellBook *domain.SellBook
	}
	mock.lockApplySell.RLock()
	calls = mock.calls.ApplySell
	mock.lockApplySell.RUnlock()
	return calls
}
