// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"github.com/google/uuid"
	"github.com/jkmrto/trade_executor/app"
	"github.com/jkmrto/trade_executor/domain"
	"sync"
)

// Ensure, that ExchangeMock does implement app.Exchange.
// If this is not the case, regenerate this file with moq.
var _ app.Exchange = &ExchangeMock{}

// ExchangeMock is a mock implementation of app.Exchange.
//
//	func TestSomethingThatUsesExchange(t *testing.T) {
//
//		// make and configure a mocked app.Exchange
//		mockedExchange := &ExchangeMock{
//			ApplySellFunc: func(sellOrderBook domain.SellOrderBook) error {
//				panic("mock out the ApplySell method")
//			},
//			GetSellOrderBooksFunc: func(uUID uuid.UUID) ([]domain.SellOrderBook, error) {
//				panic("mock out the GetSellOrderBooks method")
//			},
//		}
//
//		// use mockedExchange in code that requires app.Exchange
//		// and then make assertions.
//
//	}
type ExchangeMock struct {
	// ApplySellFunc mocks the ApplySell method.
	ApplySellFunc func(sellOrderBook domain.SellOrderBook) error

	// GetSellOrderBooksFunc mocks the GetSellOrderBooks method.
	GetSellOrderBooksFunc func(uUID uuid.UUID) ([]domain.SellOrderBook, error)

	// calls tracks calls to the methods.
	calls struct {
		// ApplySell holds details about calls to the ApplySell method.
		ApplySell []struct {
			// SellOrderBook is the sellOrderBook argument value.
			SellOrderBook domain.SellOrderBook
		}
		// GetSellOrderBooks holds details about calls to the GetSellOrderBooks method.
		GetSellOrderBooks []struct {
			// UUID is the uUID argument value.
			UUID uuid.UUID
		}
	}
	lockApplySell         sync.RWMutex
	lockGetSellOrderBooks sync.RWMutex
}

// ApplySell calls ApplySellFunc.
func (mock *ExchangeMock) ApplySell(sellOrderBook domain.SellOrderBook) error {
	if mock.ApplySellFunc == nil {
		panic("ExchangeMock.ApplySellFunc: method is nil but Exchange.ApplySell was just called")
	}
	callInfo := struct {
		SellOrderBook domain.SellOrderBook
	}{
		SellOrderBook: sellOrderBook,
	}
	mock.lockApplySell.Lock()
	mock.calls.ApplySell = append(mock.calls.ApplySell, callInfo)
	mock.lockApplySell.Unlock()
	return mock.ApplySellFunc(sellOrderBook)
}

// ApplySellCalls gets all the calls that were made to ApplySell.
// Check the length with:
//
//	len(mockedExchange.ApplySellCalls())
func (mock *ExchangeMock) ApplySellCalls() []struct {
	SellOrderBook domain.SellOrderBook
} {
	var calls []struct {
		SellOrderBook domain.SellOrderBook
	}
	mock.lockApplySell.RLock()
	calls = mock.calls.ApplySell
	mock.lockApplySell.RUnlock()
	return calls
}

// GetSellOrderBooks calls GetSellOrderBooksFunc.
func (mock *ExchangeMock) GetSellOrderBooks(uUID uuid.UUID) ([]domain.SellOrderBook, error) {
	if mock.GetSellOrderBooksFunc == nil {
		panic("ExchangeMock.GetSellOrderBooksFunc: method is nil but Exchange.GetSellOrderBooks was just called")
	}
	callInfo := struct {
		UUID uuid.UUID
	}{
		UUID: uUID,
	}
	mock.lockGetSellOrderBooks.Lock()
	mock.calls.GetSellOrderBooks = append(mock.calls.GetSellOrderBooks, callInfo)
	mock.lockGetSellOrderBooks.Unlock()
	return mock.GetSellOrderBooksFunc(uUID)
}

// GetSellOrderBooksCalls gets all the calls that were made to GetSellOrderBooks.
// Check the length with:
//
//	len(mockedExchange.GetSellOrderBooksCalls())
func (mock *ExchangeMock) GetSellOrderBooksCalls() []struct {
	UUID uuid.UUID
} {
	var calls []struct {
		UUID uuid.UUID
	}
	mock.lockGetSellOrderBooks.RLock()
	calls = mock.calls.GetSellOrderBooks
	mock.lockGetSellOrderBooks.RUnlock()
	return calls
}
